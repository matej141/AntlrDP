//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/ciern/RiderProjects/ANTLR_DP/AntlrDP/AntlrDP/AntlrDP\SequenceDiagram.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class SequenceDiagramParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, STRING=29, NUMBER=30, WS=31;
	public const int
		RULE_json = 0, RULE_obj = 1, RULE_pair = 2, RULE_arr = 3, RULE_value = 4, 
		RULE_name = 5, RULE_xmiId = 6, RULE_xmiIdRef = 7, RULE_lifeline = 8, RULE_message = 9, 
		RULE_occurenceSpecification = 10, RULE_combinedFragment = 11, RULE_interactionOperand = 12, 
		RULE_guard = 13, RULE_fragments = 14, RULE_specification = 15, RULE_interactionConstraint = 16, 
		RULE_opaqueExpression = 17, RULE_covered = 18, RULE_receiveEvent = 19, 
		RULE_sendEvent = 20, RULE_body = 21, RULE_interactionOperator = 22, RULE_operand = 23;
	public static readonly string[] ruleNames = {
		"json", "obj", "pair", "arr", "value", "name", "xmiId", "xmiIdRef", "lifeline", 
		"message", "occurenceSpecification", "combinedFragment", "interactionOperand", 
		"guard", "fragments", "specification", "interactionConstraint", "opaqueExpression", 
		"covered", "receiveEvent", "sendEvent", "body", "interactionOperator", 
		"operand"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "','", "'}'", "':'", "'['", "']'", "'true'", "'false'", "'null'", 
		"'\"name\"'", "'\"XmiId\"'", "'\"XmiIdRef\"'", "'\"uml:Lifeline\"'", "'\"uml:Message\"'", 
		"'\"uml:OccurrenceSpecification\"'", "'\"uml:CombinedFragment\"'", "'\"uml:InteractionOperand\"'", 
		"'\"guard\"'", "'\"fragment\"'", "'\"specification\"'", "'\"uml:InteractionConstraint\"'", 
		"'\"uml:OpaqueExpression\"'", "'\"covered\"'", "'\"receiveEvent\"'", "'\"sendEvent\"'", 
		"'\"body\"'", "'\"interactionOperator\"'", "'\"operand\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "STRING", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SequenceDiagram.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SequenceDiagramParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SequenceDiagramParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SequenceDiagramParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class JsonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SequenceDiagramParser.Eof, 0); }
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 0, RULE_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			value();
			State = 49;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 2, RULE_obj);
		int _la;
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				Match(T__0);
				State = 52;
				pair();
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 53;
					Match(T__1);
					State = 54;
					pair();
					}
					}
					State = 59;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 60;
				Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62;
				Match(T__0);
				State = 63;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SequenceDiagramParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LifelineContext lifeline() {
			return GetRuleContext<LifelineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XmiIdContext xmiId() {
			return GetRuleContext<XmiIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XmiIdRefContext xmiIdRef() {
			return GetRuleContext<XmiIdRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageContext message() {
			return GetRuleContext<MessageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OccurenceSpecificationContext occurenceSpecification() {
			return GetRuleContext<OccurenceSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CoveredContext covered() {
			return GetRuleContext<CoveredContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReceiveEventContext receiveEvent() {
			return GetRuleContext<ReceiveEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SendEventContext sendEvent() {
			return GetRuleContext<SendEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CombinedFragmentContext combinedFragment() {
			return GetRuleContext<CombinedFragmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InteractionOperatorContext interactionOperator() {
			return GetRuleContext<InteractionOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InteractionOperandContext interactionOperand() {
			return GetRuleContext<InteractionOperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GuardContext guard() {
			return GetRuleContext<GuardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InteractionConstraintContext interactionConstraint() {
			return GetRuleContext<InteractionConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecificationContext specification() {
			return GetRuleContext<SpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpaqueExpressionContext opaqueExpression() {
			return GetRuleContext<OpaqueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FragmentsContext fragments() {
			return GetRuleContext<FragmentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 4, RULE_pair);
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				Match(STRING);
				State = 67;
				Match(T__3);
				State = 68;
				value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 70;
				lifeline();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 71;
				xmiId();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 72;
				xmiIdRef();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 73;
				message();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 74;
				occurenceSpecification();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 75;
				covered();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 76;
				receiveEvent();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 77;
				sendEvent();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 78;
				combinedFragment();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 79;
				interactionOperator();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 80;
				interactionOperand();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 81;
				guard();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 82;
				interactionConstraint();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 83;
				specification();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 84;
				opaqueExpression();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 85;
				operand();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 86;
				fragments();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 87;
				body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrContext arr() {
		ArrContext _localctx = new ArrContext(Context, State);
		EnterRule(_localctx, 6, RULE_arr);
		int _la;
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				Match(T__4);
				State = 91;
				value();
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 92;
					Match(T__1);
					State = 93;
					value();
					}
					}
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 99;
				Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				Match(T__4);
				State = 102;
				Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SequenceDiagramParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(SequenceDiagramParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrContext arr() {
			return GetRuleContext<ArrContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 8, RULE_value);
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105;
				Match(STRING);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106;
				Match(NUMBER);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 107;
				obj();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 108;
				arr();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 5);
				{
				State = 109;
				Match(T__6);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 6);
				{
				State = 110;
				Match(T__7);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 7);
				{
				State = 111;
				Match(T__8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 10, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(T__9);
			State = 115;
			Match(T__3);
			State = 116;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmiIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public XmiIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmiId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmiId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmiIdContext xmiId() {
		XmiIdContext _localctx = new XmiIdContext(Context, State);
		EnterRule(_localctx, 12, RULE_xmiId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(T__10);
			State = 119;
			Match(T__3);
			State = 120;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmiIdRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public XmiIdRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmiIdRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmiIdRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmiIdRefContext xmiIdRef() {
		XmiIdRefContext _localctx = new XmiIdRefContext(Context, State);
		EnterRule(_localctx, 14, RULE_xmiIdRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(T__11);
			State = 123;
			Match(T__3);
			State = 124;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LifelineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SequenceDiagramParser.STRING, 0); }
		public LifelineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lifeline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLifeline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LifelineContext lifeline() {
		LifelineContext _localctx = new LifelineContext(Context, State);
		EnterRule(_localctx, 16, RULE_lifeline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(STRING);
			State = 127;
			Match(T__3);
			State = 128;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SequenceDiagramParser.STRING, 0); }
		public MessageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageContext message() {
		MessageContext _localctx = new MessageContext(Context, State);
		EnterRule(_localctx, 18, RULE_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(STRING);
			State = 131;
			Match(T__3);
			State = 132;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OccurenceSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SequenceDiagramParser.STRING, 0); }
		public OccurenceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_occurenceSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOccurenceSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OccurenceSpecificationContext occurenceSpecification() {
		OccurenceSpecificationContext _localctx = new OccurenceSpecificationContext(Context, State);
		EnterRule(_localctx, 20, RULE_occurenceSpecification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(STRING);
			State = 135;
			Match(T__3);
			State = 136;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CombinedFragmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SequenceDiagramParser.STRING, 0); }
		public CombinedFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combinedFragment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombinedFragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CombinedFragmentContext combinedFragment() {
		CombinedFragmentContext _localctx = new CombinedFragmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_combinedFragment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(STRING);
			State = 139;
			Match(T__3);
			State = 140;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InteractionOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SequenceDiagramParser.STRING, 0); }
		public InteractionOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interactionOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteractionOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InteractionOperandContext interactionOperand() {
		InteractionOperandContext _localctx = new InteractionOperandContext(Context, State);
		EnterRule(_localctx, 24, RULE_interactionOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(STRING);
			State = 143;
			Match(T__3);
			State = 144;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public GuardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuardContext guard() {
		GuardContext _localctx = new GuardContext(Context, State);
		EnterRule(_localctx, 26, RULE_guard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(T__17);
			State = 147;
			Match(T__3);
			State = 148;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FragmentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public FragmentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fragments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFragments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FragmentsContext fragments() {
		FragmentsContext _localctx = new FragmentsContext(Context, State);
		EnterRule(_localctx, 28, RULE_fragments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(T__18);
			State = 151;
			Match(T__3);
			State = 152;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public SpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificationContext specification() {
		SpecificationContext _localctx = new SpecificationContext(Context, State);
		EnterRule(_localctx, 30, RULE_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(T__19);
			State = 155;
			Match(T__3);
			State = 156;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InteractionConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SequenceDiagramParser.STRING, 0); }
		public InteractionConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interactionConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteractionConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InteractionConstraintContext interactionConstraint() {
		InteractionConstraintContext _localctx = new InteractionConstraintContext(Context, State);
		EnterRule(_localctx, 32, RULE_interactionConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(STRING);
			State = 159;
			Match(T__3);
			State = 160;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpaqueExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SequenceDiagramParser.STRING, 0); }
		public OpaqueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opaqueExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpaqueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpaqueExpressionContext opaqueExpression() {
		OpaqueExpressionContext _localctx = new OpaqueExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_opaqueExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(STRING);
			State = 163;
			Match(T__3);
			State = 164;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoveredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public CoveredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_covered; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCovered(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoveredContext covered() {
		CoveredContext _localctx = new CoveredContext(Context, State);
		EnterRule(_localctx, 36, RULE_covered);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(T__22);
			State = 167;
			Match(T__3);
			State = 168;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiveEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ReceiveEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiveEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceiveEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReceiveEventContext receiveEvent() {
		ReceiveEventContext _localctx = new ReceiveEventContext(Context, State);
		EnterRule(_localctx, 38, RULE_receiveEvent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(T__23);
			State = 171;
			Match(T__3);
			State = 172;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public SendEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSendEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SendEventContext sendEvent() {
		SendEventContext _localctx = new SendEventContext(Context, State);
		EnterRule(_localctx, 40, RULE_sendEvent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(T__24);
			State = 175;
			Match(T__3);
			State = 176;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(T__25);
			State = 179;
			Match(T__3);
			State = 180;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InteractionOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public InteractionOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interactionOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteractionOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InteractionOperatorContext interactionOperator() {
		InteractionOperatorContext _localctx = new InteractionOperatorContext(Context, State);
		EnterRule(_localctx, 44, RULE_interactionOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(T__26);
			State = 183;
			Match(T__3);
			State = 184;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISequenceDiagramVisitor<TResult> typedVisitor = visitor as ISequenceDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 46, RULE_operand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(T__27);
			State = 187;
			Match(T__3);
			State = 188;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,31,191,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,56,8,1,10,1,12,1,59,
		9,1,1,1,1,1,1,1,1,1,3,1,65,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,89,8,2,1,3,1,3,1,3,
		1,3,5,3,95,8,3,10,3,12,3,98,9,3,1,3,1,3,1,3,1,3,3,3,104,8,3,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,3,4,113,8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,
		1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,
		1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
		1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,
		1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
		1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,0,0,24,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,0,0,195,0,48,1,0,0,0,2,
		64,1,0,0,0,4,88,1,0,0,0,6,103,1,0,0,0,8,112,1,0,0,0,10,114,1,0,0,0,12,
		118,1,0,0,0,14,122,1,0,0,0,16,126,1,0,0,0,18,130,1,0,0,0,20,134,1,0,0,
		0,22,138,1,0,0,0,24,142,1,0,0,0,26,146,1,0,0,0,28,150,1,0,0,0,30,154,1,
		0,0,0,32,158,1,0,0,0,34,162,1,0,0,0,36,166,1,0,0,0,38,170,1,0,0,0,40,174,
		1,0,0,0,42,178,1,0,0,0,44,182,1,0,0,0,46,186,1,0,0,0,48,49,3,8,4,0,49,
		50,5,0,0,1,50,1,1,0,0,0,51,52,5,1,0,0,52,57,3,4,2,0,53,54,5,2,0,0,54,56,
		3,4,2,0,55,53,1,0,0,0,56,59,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,58,60,
		1,0,0,0,59,57,1,0,0,0,60,61,5,3,0,0,61,65,1,0,0,0,62,63,5,1,0,0,63,65,
		5,3,0,0,64,51,1,0,0,0,64,62,1,0,0,0,65,3,1,0,0,0,66,67,5,29,0,0,67,68,
		5,4,0,0,68,89,3,8,4,0,69,89,3,10,5,0,70,89,3,16,8,0,71,89,3,12,6,0,72,
		89,3,14,7,0,73,89,3,18,9,0,74,89,3,20,10,0,75,89,3,36,18,0,76,89,3,38,
		19,0,77,89,3,40,20,0,78,89,3,22,11,0,79,89,3,44,22,0,80,89,3,24,12,0,81,
		89,3,26,13,0,82,89,3,32,16,0,83,89,3,30,15,0,84,89,3,34,17,0,85,89,3,46,
		23,0,86,89,3,28,14,0,87,89,3,42,21,0,88,66,1,0,0,0,88,69,1,0,0,0,88,70,
		1,0,0,0,88,71,1,0,0,0,88,72,1,0,0,0,88,73,1,0,0,0,88,74,1,0,0,0,88,75,
		1,0,0,0,88,76,1,0,0,0,88,77,1,0,0,0,88,78,1,0,0,0,88,79,1,0,0,0,88,80,
		1,0,0,0,88,81,1,0,0,0,88,82,1,0,0,0,88,83,1,0,0,0,88,84,1,0,0,0,88,85,
		1,0,0,0,88,86,1,0,0,0,88,87,1,0,0,0,89,5,1,0,0,0,90,91,5,5,0,0,91,96,3,
		8,4,0,92,93,5,2,0,0,93,95,3,8,4,0,94,92,1,0,0,0,95,98,1,0,0,0,96,94,1,
		0,0,0,96,97,1,0,0,0,97,99,1,0,0,0,98,96,1,0,0,0,99,100,5,6,0,0,100,104,
		1,0,0,0,101,102,5,5,0,0,102,104,5,6,0,0,103,90,1,0,0,0,103,101,1,0,0,0,
		104,7,1,0,0,0,105,113,5,29,0,0,106,113,5,30,0,0,107,113,3,2,1,0,108,113,
		3,6,3,0,109,113,5,7,0,0,110,113,5,8,0,0,111,113,5,9,0,0,112,105,1,0,0,
		0,112,106,1,0,0,0,112,107,1,0,0,0,112,108,1,0,0,0,112,109,1,0,0,0,112,
		110,1,0,0,0,112,111,1,0,0,0,113,9,1,0,0,0,114,115,5,10,0,0,115,116,5,4,
		0,0,116,117,3,8,4,0,117,11,1,0,0,0,118,119,5,11,0,0,119,120,5,4,0,0,120,
		121,3,8,4,0,121,13,1,0,0,0,122,123,5,12,0,0,123,124,5,4,0,0,124,125,3,
		8,4,0,125,15,1,0,0,0,126,127,5,29,0,0,127,128,5,4,0,0,128,129,5,13,0,0,
		129,17,1,0,0,0,130,131,5,29,0,0,131,132,5,4,0,0,132,133,5,14,0,0,133,19,
		1,0,0,0,134,135,5,29,0,0,135,136,5,4,0,0,136,137,5,15,0,0,137,21,1,0,0,
		0,138,139,5,29,0,0,139,140,5,4,0,0,140,141,5,16,0,0,141,23,1,0,0,0,142,
		143,5,29,0,0,143,144,5,4,0,0,144,145,5,17,0,0,145,25,1,0,0,0,146,147,5,
		18,0,0,147,148,5,4,0,0,148,149,3,8,4,0,149,27,1,0,0,0,150,151,5,19,0,0,
		151,152,5,4,0,0,152,153,3,8,4,0,153,29,1,0,0,0,154,155,5,20,0,0,155,156,
		5,4,0,0,156,157,3,8,4,0,157,31,1,0,0,0,158,159,5,29,0,0,159,160,5,4,0,
		0,160,161,5,21,0,0,161,33,1,0,0,0,162,163,5,29,0,0,163,164,5,4,0,0,164,
		165,5,22,0,0,165,35,1,0,0,0,166,167,5,23,0,0,167,168,5,4,0,0,168,169,3,
		8,4,0,169,37,1,0,0,0,170,171,5,24,0,0,171,172,5,4,0,0,172,173,3,8,4,0,
		173,39,1,0,0,0,174,175,5,25,0,0,175,176,5,4,0,0,176,177,3,8,4,0,177,41,
		1,0,0,0,178,179,5,26,0,0,179,180,5,4,0,0,180,181,3,8,4,0,181,43,1,0,0,
		0,182,183,5,27,0,0,183,184,5,4,0,0,184,185,3,8,4,0,185,45,1,0,0,0,186,
		187,5,28,0,0,187,188,5,4,0,0,188,189,3,8,4,0,189,47,1,0,0,0,6,57,64,88,
		96,103,112
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
